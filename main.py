from fastapi import FastAPI, Request
import requests, os, json

app = FastAPI()

# üîê –¢–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —É–∫–∞–∑–∞–ª –≤ Meta (Verify Token)
VERIFY_TOKEN = "carbot123"


# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ (GET)
@app.get("/webhook")
async def verify(request: Request):
    params = request.query_params
    if params.get("hub.verify_token") == VERIFY_TOKEN:
        return int(params.get("hub.challenge"))
    return {"error": "Invalid token"}


# üü¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
@app.get("/")
def root():
    return {"status": "ok"}


# üí¨ –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π WhatsApp ‚Üí GPT ‚Üí WhatsApp
@app.post("/webhook")
async def webhook(req: Request):
    data = await req.json()
    print("üì© –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", json.dumps(data, indent=2, ensure_ascii=False))

    # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    try:
        message = data["entry"][0]["changes"][0]["value"]["messages"][0]
        text = message.get("text", {}).get("body", "")
        phone = message["from"]

        # ‚öôÔ∏è –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–¥ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è WhatsApp Sandbox
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
        phone = ''.join(filter(str.isdigit, phone))

        # –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é (–¥–ª—è Sandbox), —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π:
        # phone = "79258608489"

        print(f"üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {phone}: {text}")
    except Exception as e:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö:", e)
        return {"status": "ignored"}

    # üß† GPT –æ—Ç–≤–µ—Ç
    headers = {"Authorization": f"Bearer {os.getenv('OPENAI_API_KEY')}"}
    payload = {
        "model": "gpt-3.5-turbo",
        "messages": [
            {
                "role": "system",
                "content": "–¢—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–∞. –û—Ç–≤–µ—á–∞–π —á—ë—Ç–∫–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É."
            },
            {"role": "user", "content": text}
        ]
    }

    r = requests.post("https://api.openai.com/v1/chat/completions", headers=headers, json=payload)
    print("üß† –û—Ç–≤–µ—Ç –æ—Ç OpenAI:", r.text)  # –ª–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API
    print("üìû –Ω–æ–º–µ—Ä –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–æ–º–µ—Ä –∏–∑ –≤—Ö–æ–¥—è—â–µ–≥–æ JSON:", message["from"])
    print("üìã –í—Å–µ –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ:", json.dumps(data, indent=2, ensure_ascii=False))

    if r.status_code != 200:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ OpenAI:", r.text)
        return {"status": "openai_error"}

    data = r.json()
    if "choices" not in data:
        print("‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—è choices –≤ –æ—Ç–≤–µ—Ç–µ:", data)
        return {"status": "openai_format_error"}

    reply = data["choices"][0]["message"]["content"]
    print("ü§ñ –û—Ç–≤–µ—Ç GPT:", reply)

    # üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ WhatsApp
    wa_url = f"https://graph.facebook.com/v20.0/{os.getenv('PHONE_ID')}/messages"
    wa_headers = {
        "Authorization": f"Bearer {os.getenv('WHATSAPP_TOKEN')}",
        "Content-Type": "application/json"
    }
    wa_payload = {
        "messaging_product": "whatsapp",
        "to": phone,
        "type": "text",
        "text": {"body": reply}
    }

    resp = requests.post(wa_url, headers=wa_headers, json=wa_payload)
    print("üì§ –û—Ç–≤–µ—Ç WhatsApp API:", resp.text)

    return {"status": "ok"}
